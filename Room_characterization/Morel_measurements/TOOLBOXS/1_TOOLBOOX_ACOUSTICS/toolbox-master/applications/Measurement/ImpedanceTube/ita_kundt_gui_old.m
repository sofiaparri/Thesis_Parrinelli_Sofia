function ita_kundt_gui
%ITA_FRF_GUI - GUI for frequency response measurements
%
%   
%
% Syntax:  ita_kundt_gui()
%
% Autor: Roman Scharrer -- Email: rsc@akustik.rwth-aachen.de

% <ITA-Toolbox>
% This file is part of the application Kundt for the ITA-Toolbox. All rights reserved. 
% You can find the license for this m-file in the application folder. 
% </ITA-Toolbox>


% ToDo: Measurement Setup, Add possibility for 3/6 mic measurements, usefull preset for time_window
%% Setup
% Messeinstellungen und presets
impulse_response_averages = 3;          % Anzahl der Messungen pro Position
fft_degree  = 16;                       % Länge des Anregungssignals
low_freq    = 50;                       % Untere Grenzfrequenz des Anregungssignals
high_freq   = 10000;                    % Obere Anregungsfrequens des Anregungssignals
sr          = 44100;                    % Sample Rate
Excitation  = 'logsweep';               % Art des Anregungssignals

% Hardware Setup
in_ch      = 1;                        % Eingangs-Kanäle
out_ch     = 1;                        % Ausgangs-Kanäle

%% Initialisierung
tmp = itaHeader();
ChannelSets = tmp.Channel;
ChannelSets.Sensitivity = 1;
clear tmp;
MeasurementSetup = ita_measurement_setup(in_ch,out_ch,sr,fft_degree,[low_freq high_freq],'Excitation',Excitation,'ChannelSettings',ChannelSets,'averages',impulse_response_averages);

%% Initialization
top_margin   = 25;
hor_space_s  = 5;
height       = top_margin + 14*(hor_space_s + 30);
left_margin  = 10;
width        = 340;
width_button = 100;
last_col = width-width_button-left_margin;
center_col = (width-width_button)/2;
MainPosition = [100 500 width height];
variable = [];

%% Time Window Preset
twpList{1}.description = 'Use Time Window'; %this text will be shown in the GUI
twpList{1}.helptext    = 'Switch Time Window on/off'; %this text should be shown when the mouse moves over the textfield for the description
twpList{1}.datatype    = 'bool'; %based on this type a different row of elements has to drawn in the GUI
twpList{1}.default     = true; %default value, could also be empty, otherwise it has to be of the datatype specified above
twpList{2}.description = 'Timeframe'; %this text will be shown in the GUI
twpList{2}.helptext    = 'Please enter time frame to be used as window'; %this text should be shown when the mouse moves over the textfield for the description
twpList{2}.datatype    = 'double'; %based on this type a different row of elements has to drawn in the GUI
twpList{2}.default     = [0.1 0.2]; %default value, could also be empty, otherwise it has to be of the datatype specified above

%% Rohrbert Preset
rbpList{1}.description = 'Output'; %this text will be shown in the GUI
rbpList{1}.helptext    = 'Select Rohrbert Output'; %this text should be shown when the mouse moves over the textfield for the description
rbpList{1}.datatype    = 'char_popup'; %based on this type a different row of elements has to drawn in the GUI
rbpList{1}.list      = 'Abs|Ref|Imp|Adm|Tau|SI|Allrefl|All';
rbpList{1}.default     = 'Allrefl'; %default value, could also be empty, otherwise it has to be of the datatype specified above
rbpList{2}.description = 'Select Tube'; %this text will be shown in the GUI
rbpList{2}.helptext    = 'see help ita_rohrbert'; %this text should be shown when the mouse moves over the textfield for the description
rbpList{2}.datatype    = 'int_popup'; %based on this type a different row of elements has to drawn in the GUI
rbpList{2}.list        = [1 2 3];
rbpList{2}.default     = 1; %default value, could also be empty, otherwise it has to be of the datatype specified above



%% Main Figure

    hkundtFigure = figure( ...       % the main GUI figure
        'MenuBar','none', ...
        'Toolbar','none', ...
        'HandleVisibility','on', ...
        'Name', 'Kundt', ...
        'NumberTitle','off', ...
        'Position' , MainPosition, ...
        'Color', [0.8 0.8 0.8]);

figSet.hkundtFigure = hkundtFigure;

%Name input
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [center_col height-30 width_button 30],...
    'String','Name',...
    'Style', 'text',...
    'HorizontalAlignment','center',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);
hnameedit = uicontrol(...
    'Parent', hkundtFigure, ...
    'Position',[center_col height-45 width_button 30],...
    'String','Test',...
    'BackgroundColor',[0.8 0.8 0.8],...
    'HorizontalAlignment','left',...
    'Style', 'edit');
% Results
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [center_col height-80 width_button 30],...
    'String','Measurement',...
    'Style', 'text',...
    'HorizontalAlignment','center',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);

% Mic buttons
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin height-100 width_button 30],...
    'String','Mic1',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@RunButtonCallback);
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin+width_button+10 height-100 width_button 30],...
    'String','Mic2',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@RunButtonCallback);
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin+2*(width_button+10) height-100 width_button 30],...
    'String','Mic3',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@RunButtonCallback);

% % Results
% uicontrol(...
%     'Parent', hkundtFigure,...
%     'Position', [center_col height-120 width_button 30],...
%     'String','Results',...
%     'Style', 'text',...
%     'HorizontalAlignment','center',...
%     'ForegroundColor', [0 0 .7],...
%     'BackgroundColor', [0.8 0.8 0.8]);
%Plot_spectrum
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin height-150 width_button 30],...
    'String','Plot spectrum',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@PlotSpectrumButtonCallback);
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin+width_button+10 height-150 width_button 30],...
    'String','Plot signal',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@PlotSignalButtonCallback);
% Save
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin+2*(width_button+10) height-150 width_button 30],...
    'String','Save',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@SaveButtonCallback);

%% Time Window
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [center_col height-200 width_button 30],...
    'String','Window',...
    'Style', 'text',...
    'HorizontalAlignment','center',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin+2*(width_button+10) height-220 width_button 30],...
    'String','Settings',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@TimeWindowSettings);
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin+width_button+10 height-220 width_button 30],...
    'String','Plot signal',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@PlotWindowedSignalButtonCallback);
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin height-220 width_button 30],...
    'String','Plot spectrum',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@PlotWindowedSpectrumButtonCallback);
% uicontrol(...
%     'Parent', hkundtFigure,...
%     'Position', [left_margin+2*(width_button+10) height-220 width_button 30],...
%     'String','Save',...
%     'Style', 'pushbutton',...
%     'ForegroundColor', [0 0 .7],...
%     'BackgroundColor', [0.8 0.8 0.8],...
%     'Callback',@SaveButtonCallback);

%% Rohrbert
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [center_col height-270 width_button 30],...
    'String','Rohrbert',...
    'Style', 'text',...
    'HorizontalAlignment','center',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin height-290 width_button 30],...
    'String','Plot results',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@PlotResultButtonCallback);

uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin+(width_button+10)/1.5 height-350 width_button*1.7 30*1.5],...
    'String','Save results',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@SaveResultButtonCallback);
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin+2*(width_button+10) height-290 width_button 30],...
    'String','Settings',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@RohrbertSettingsButtonCallback);

% Clear buffer
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin+1*(width_button+10) height-290 width_button 30],...
    'String','Clear results',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@ClearBufferButtonCallback);

% Settings
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [center_col height-390 width_button 30],...
    'String','Settings',...
    'Style', 'text',...
    'HorizontalAlignment','center',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);
% uicontrol(...
%     'Parent', hkundtFigure,...
%     'Position', [left_margin height-410 width_button 30],...
%     'String','Select Channels',...
%     'Style', 'pushbutton',...
%     'ForegroundColor', [0 0 .7],...
%     'BackgroundColor', [0.8 0.8 0.8],...
%     'Callback',@SelectChannelsButtonCallback);
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin+2*(width_button+10) height-410 width_button 30],...
    'String','Preferences',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@PreferencesButtonCallback);
uicontrol(...
    'Parent', hkundtFigure,...
    'Position', [left_margin height-410 width_button 30],...
    'String','Meas. Setup',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'Callback',@MeasurementSetupButtonCallback);

%% ita toolbox logo with grey background
a_im = importdata(which('ita_toolbox_logo.png'));
image(a_im);axis off
set(gca,'Units','pixel', 'Position', [0 top_margin width round(65*width/350)]);

%% Callback functions
    function MeasurementSetupButtonCallback(hObject, eventdata)
       MeasurementSetup = ita_measurement_setup(MeasurementSetup);
    end

    function PlotResultButtonCallback(hObject, eventdata)
        try  %#ok<*TRYNC>
            Mic(1) = evalin('base','Mic1');
        end
        try
            Mic(2) = evalin('base','Mic2');
        end
        try
            Mic(3) = evalin('base','Mic3');
        end
        try
            result = ita_merge(Mic);
            if twpList{2}.default,            result = ita_time_window(result,twpList{2}.default,'time'); end
            result = ita_rohrbert(result,'output',rbpList{1}.default,'dist',rbpList{2}.default);
            ita_plot_spk(result,'nodB','xlim',[0 10000],'linfreq','on');
            assignin('base','Result',result);
        catch errmsg
            disp('No Result!');
            disp(errmsg);
        end
        
    end

    function RohrbertSettingsButtonCallback(hObject, eventdata)
        [tmp rbpList] = ita_parametric_GUI(rbpList,'ita_rohrbert');
    end

    function SaveResultButtonCallback(hObject, eventdata)
        try  %#ok<*TRYNC>
            Mic(1) = evalin('base','Mic1');
        end
        try
            Mic(2) = evalin('base','Mic2');
        end
        try
            Mic(3) = evalin('base','Mic3');
        end
        try
            result = ita_merge(Mic);
            if twpList{2}.default,            result = ita_time_window(result,twpList{2}.default,'time'); end
            result = ita_rohrbert(result,'output',rbpList{1}.default,'dist',rbpList{2}.default);
            %ita_plot_spk(result,'nodB','xlim',[0 10000],'linfreq','on');
            filename = [get(hnameedit,'String') '_' rbpList{1}.default '.ita'];
            disp(['Saved to: ' filename]);
            ita_write(result,filename);
            assignin('base','Result',result);
        catch errmsg
            disp('No Result!');
            disp(errmsg)
        end
        SaveButtonCallback(hObject,eventdata)
        
    end

    function PlotWindowedSignalButtonCallback(hObject, eventdata)
        
        try  %#ok<*TRYNC>
            Mic(1) = evalin('base','Mic1');
        end
        try
            Mic(2) = evalin('base','Mic2');
        end
        try
            Mic(3) = evalin('base','Mic3');
        end
        try
            result = ita_merge(Mic);
            if twpList{2}.default,            result = ita_time_window(result,twpList{2}.default,'time'); end
            ita_plot_dat(result)
        catch %#ok<CTCH>
            disp('No Result!');
        end
        
        
    end

    function PlotWindowedSpectrumButtonCallback(hObject, eventdata)
        
        try  %#ok<*TRYNC>
            Mic(1) = evalin('base','Mic1');
        end
        try
            Mic(2) = evalin('base','Mic2');
        end
        try
            Mic(3) = evalin('base','Mic3');
        end
        try
            result = ita_merge(Mic);
            if twpList{2}.default,            result = ita_time_window(result,twpList{2}.default,'time'); end
            ita_plot_spkphase(result);
        catch %#ok<CTCH>
            disp('No Result!');
        end
        
        
    end

    function TimeWindowSettings(hObject,eventdata)
        try
            [tmp twpList] = ita_parametric_GUI(twpList,'ita_time_window');
        catch %#ok<CTCH>
        end
    end

    function PlotSpectrumButtonCallback(hObject,eventdata) %#ok<*INUSD>
        try  %#ok<*TRYNC>
            Mic(1) = evalin('base','Mic1');
        end
        try
            Mic(2) = evalin('base','Mic2');
        end
        try
            Mic(3) = evalin('base','Mic3');
        end
        try
            result = ita_merge(Mic);
            ita_plot_spkphase(result);
        catch %#ok<CTCH>
            disp('No Result!');
        end
    end

    function PlotSignalButtonCallback(hObject,eventdata) %#ok<*INUSD>
        try  %#ok<*TRYNC>
            Mic(1) = evalin('base','Mic1');
        end
        try
            Mic(2) = evalin('base','Mic2');
        end
        try
            Mic(3) = evalin('base','Mic3');
        end
        try
            result = ita_merge(Mic);
            ita_plot_dat(result);
        catch %#ok<CTCH>
            disp('No Result!');
        end
    end

    function SaveButtonCallback(hObject,eventdata) %#ok<*INUSD>
        try
            Mic1 = evalin('base','Mic1');
            Mic2 = evalin('base','Mic2');
            Mic3 = evalin('base','Mic3');
            result = ita_merge([Mic1 Mic2 Mic3]);
            filename = [get(hnameedit,'String') '_rawdata.ita'];
            disp(['Saved to: ' filename]);
            ita_write(result,filename);
        catch %#ok<CTCH>
            disp('No Result!');
        end
    end





    function ClearBufferButtonCallback(hObject,eventdata) %#ok<*INUSD>
        try
            evalin('base','clear Mic1 Mic2 Mic3 Filtered Result');
        catch %#ok<CTCH>
            
        end
    end

    function changenumberofmics(hObject,eventdata) %#ok<INUSD>
        %in_ch      = in_ch(1)+(0:str2double(get(hObject,'String'))-1);                        % Eingangs-Kanäle
        %ChannelSettings(1:numel(in_ch)) = ChannelSets(1);
        %MeasurementSetup = ita_measurement_setup(in_ch,out_ch,sr,fft_degree,[low_freq high_freq],'Excitation',Excitation,'ChannelSettings',ChannelSettings);
        %clear ChannelSettings;
    end


    function RunButtonCallback(hObject,eventdata) %#ok<INUSD>
        result = ita_measurement_run(MeasurementSetup);
        result = ita_split(result,1);
        name = get(hObject,'String');
        result.channelNames{1} = name;
        result.comment = get(hnameedit,'String');
        assignin('base',name,result);
    end

    function SelectChannelsButtonCallback(hObject,eventdata)
        [in_ch out_ch] = ita_channelselect_gui(in_ch, out_ch);
        changenumberofmics(hObject,eventdata);
    end

    function PreferencesButtonCallback(hObject,eventdata)
        ita_preferences();
    end



end % end function
