function H_sm = smooth_balasz(H)


% <ITA-Toolbox>
% This file is part of the application Binaural for the ITA-Toolbox. All rights reserved.
% You can find the license for this m-file in the application folder.
% </ITA-Toolbox>

%% Initalization
Fs=H(1,1).samplingRate;

R=0.8; 
% center frequencies of critical bands
fplog = [ sqrt(20*100) ...
          sqrt(100*200) ...
          sqrt(200*300) ...
          sqrt(300*400) ...
          sqrt(400*510) ...
          sqrt(510*630) ...
          sqrt(630*770) ...
          sqrt(770*920) ...
          sqrt(920*1080) ...
          sqrt(1080*1270) ...
          sqrt(1270*1480) ...
          sqrt(1480*1720) ...
          sqrt(1720*2000) ...
          sqrt(2000*2320) ...
          sqrt(2320*2700) ...
          sqrt(2700*3150) ...
          sqrt(3150*3700) ...
          sqrt(3700*4400) ...
          sqrt(4400*5300) ...
          sqrt(5300*6400) ...
          sqrt(6400*7700) ...
          sqrt(7700*9500) ...
          sqrt(9500*12000) ...
          sqrt(12000*15500)];
      
wp=2*pi*fplog/Fs;
p=R.^(wp/pi).*exp(1i*wp); 
plog=[p conj(p)];

outf=zeros(H(1,1).nSamples,1);
outf(1)=1; %target 

imp=zeros(1,H(1,1).nSamples);
imp(1)=1;

%%
h = H;
P = h;
H_sm = H;
for idx = 1:4
    aux = H(idx);
    id = ita_start_IR(aux);
    aux = ita_time_shift(aux,-id,'samples');
    aux = ita_time_window(aux,round([.5 1]*aux.nSamples),'samples');
    [cp,h(idx).timeData]=rceps(aux.timeData); %making the measured response minumum-phase
    P(idx) = aux/h(idx); %saving maximum phase component

    [Bm,Am,FIR]=parfiltid(h(idx).timeData,outf,plog,1); %Parallel filter design
    H_sm(idx).timeData = parfilt(Bm,Am,FIR,imp)'; %equalizer impulse response - filtering a unit pulse
    H_sm(idx) = P(idx)/H_sm(idx)/sqrt(2);   % sqrt(2) correction need. don´t know why!
    H_sm(idx) = ita_time_shift(H_sm(idx),id,'samples');
end


